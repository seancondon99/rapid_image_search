#imports
import torch
import torch.nn as nn
import torchvision.models as models
from torchvision import transforms
import time
import numpy as np
import os
import json




def gen_random_data(BATCH = 1):
    '''
    A debugging function to feed random data through the ResNet-18 network to make sure that everything
    is working as expected.

    :param BATCH: batch size of the random data (default = 1).
    :return: X, array of random data with the correct size to be fed through ResNet-18
    '''
    X = torch.randn((BATCH, 3, 256, 256), dtype=torch.float32)
    return X

def preprocess_image(npy_dir, preprocess):
    '''
    Load a numpy array at npy_dir and preprocess it to be fed through the ResNet-18 model.
    Preprocessed includes switching some dimensions around and normalizing pixel values.

    :param npy_dir: filepath specifying the .npy file to preprocess
    :param preprocess: preprocessing function to apply to data
    :return: prep_arr, preprocessed torch array
    '''
    #load and normalize np array
    arr = np.load(npy_dir)
    arr = np.divide(arr, 255)

    #permute dimensions to put n_image_channels first
    #shape H x W x 3, np array
    arr = torch.Tensor(arr)
    arr = arr.permute(2, 0, 1)

    #shape 3 x H x W, torch tensor
    prep_arr = preprocess(arr)
    prep_arr = prep_arr.unsqueeze(0)

    return prep_arr

def handle_dir(dir, model):
    '''
    Feed all the .npy arrays in dir through model, and save the model output as a json dictionary.
    The saved dictionary maps the fingerprints generated by model to a filename explaining where original
    .npy file came from.

    :param dir: The directory of .npy files to be processed.
    :param model: The PyTorch model that will generate the tile fingerprints (optimized for ResNet-18)
    :return: None, saves output as json dict
    '''

    #modify savedir to contain part of dir
    print('Fingerprint gen for %s'%(dir.split('/')[-2]))
    savedir = './fingerprints/'
    savedir += dir.split('/')[-2]
    savedir += '.json'
    outDict = {}

    #identify preprocess transform to be used, this one is standard for ResNet
    preprocess_transform = transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])

    done = 0
    #loop through all .npy files in dir
    for f in os.listdir(dir):
        if f.endswith('.npy'):
            done+=1

            #for each .npy, preprocess array with preprocess_transform
            filename = int(f.split('.')[0])
            process_dir = os.path.join(dir, f)
            preprocessed = preprocess_image(process_dir, preprocess=preprocess_transform)

            #use model forward function to get activations, this is tile fingerprint
            out = model(preprocessed)
            #convert activations to python list so we can save with json
            out = out[0].detach().numpy()
            outlist = [float(i) for i in out]
            outDict[filename] = outlist
            if done %50 == 0:
                print('at step %d'%(done))

    #dump outDict in savedir
    with open(savedir, 'w+') as f:
        json.dump(outDict, f)


#identity module to replace final layer of ResNet-18
class Identity(nn.Module):
    def __init__(self):
        super(Identity, self).__init__()

    def forward(self, x): #identity module: output = input
        return x



if __name__ == '__main__':

    #load in resnet18
    model = torch.hub.load('pytorch/vision:v0.9.0', 'resnet18', pretrained=True)
    #get rid of final fully connected layer
    model.fc = Identity()
    model.eval()


    #get a list of all completed directories so we don't repeat any processing
    completed = os.listdir('./fingerprints/')

    #loop through all directories that still need to be processed
    meta = './ingested_images/'
    for directory in os.listdir(meta):
        if directory != '.DS_Store' and (directory+'.json') not in completed:
            curr_dir =  meta + directory + '/'
            #pass each directory to handle_dir function
            handle_dir(curr_dir, model)
        else:
            print('FAILED OR COMPLETED!')
            print(directory)




